var fs = require('fs')
    , es = require('event-stream');

const path = require('path');

const clipboardy = require('clipboardy');
// import copy from 'copy-to-clipboard';

const mysql      = require('mysql');


const config =  [
  {
    host     : '192.168.1.50',
    user     : 'mysqladmin',
    password : 'Password@1',
    database : 'aohsdb_dev2',
    multipleStatements: true
  },
  {
    host     : '192.168.1.18',
    user     : 'mysqladmin',
    password : 'Password@1',
    database : 'amivoice_data_storage',
    multipleStatements: true
  }
]




// === Wrapper to use mysql with Promise
class Database {
    constructor( config ) {
        this.connection = mysql.createConnection( config );
    }
    query( sql, args ) {
        return new Promise( ( resolve, reject ) => {
            this.connection.query( sql, args, ( err, rows ) => {
                if ( err )
                    return reject( err );
                resolve( rows );
            } );
        } );
    }
    close() {
        return new Promise( ( resolve, reject ) => {
            this.connection.end( err => {
                if ( err )
                    return reject( err );
                resolve();
            } );
        } );
    }
}
const connection = new Database(config[0]);
const connection2 = new Database(config[1]);

async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array)
  }
}


 
// const data={
//    max_results: 300,
//    outputPath: 'outputs/ปิดบัญชี.csv',
//    sqlCondition: "(s.reference LIKE '%[!เ]ปิดบัญชี%' OR s.reference LIKE '%[!เ]ปิด บัญชี%')"
// }

// const data={
//    max_results: 300,
//    outputPath: 'outputs/ปิดบัญชี.csv',
//    sqlCondition: "s.reference REGEXP '[^เ]ปิด *บัญชี.*' "
// }

// const data={
//    max_results: 300,
//    outputPath: 'outputs/ขอทราบเบอร์มือถือ.csv',
//    sqlCondition: "s.reference REGEXP 'ขอ *ทราบ *เบอร์ *มือ *ถือ' "
// }

const data={
   idIn50:[
    244400,244433,244659,244603,244631,244502,244527,244482,244439,244337,244518,244663,244460,244341,244660,244667,244291,244593,244424,244645,244327,244397,244306,244450,244410,244316,244373,244552,244477,244422,244453,244485,244452,244662,244648,244554,244474,244588,244295,244317,244610,244681,244488,244513,244555,244626,244352,244395,244549,244457,244463,247327,248348,248098,246799,246010,247360,247133,247388,250439,246276,244744,246517,246677,245909,249252,250824,244944,246544,246213,247095,245019,248320,249108,251905,246571,249331,247484,245492,249422,244947,247781,244690,246975,250707,247852,251970,246022,247270,245546,250126,248441,250196,246694,250178,251851,247972,248157,247311,244849,245957,251440,250265,247616,247634,248691,247435,247367,249180,250450,246748,250774,247523,251258,248653,247700,245621,250351,248328,245565,247753,245884,250978,246895,250697,251875,250539,251542,247338,250975,247946,247611,246587,250548,247278,249400,248031,247325,249224,248271,248933,245073,246797,251976,247725,245606,250712,244888,251242,251351,245417,246562,245028,248725,251830,251745,251038,251326,250399,250275,249227,251500,251818,248256,248361,249150,249752,248733,250754,246007,247259,251222,249394,245456,249883,249169,247982,250005,249546,249193,248386,251759,245389,247191,246983,247501,251978,249356,247853,245912,250590,250684,247964,246080,245301,246689,249468,251131,249056,246955,250139,251425,247386,248680,249113,247253,246647,248551,246981,244735,249288,250138,249729,249217,248645,246088,249556,246226,245852,247261,248478,246012,249430,246902,249959,249002,250391,247898,245077,251286,251162,251183,250403,246470,246541,251396,250804,245997,247550,250272,246637,250678,245862,247012,248242,249448,249469,247708,249585,250232,249277,248746,248442,251991,245152,251426,249044,249257,245398,245143,248443,247075,244784,247224,248301,251371,251296,248536,245675,249109,250976,250451,247771,249542,251523,250692,246656,250464,246729,249153,246952,246217,248356,250054,244939,246114,248027,249088,246134,248775,246206,248604,248477,244921,247231,245560,245132,251403,248987,246207,251102,251179,246064,245413,249260,248686,249247,245153,247103,250995,247442,245333,251200,250296,250407,245534,246018,244936,248718,245495,249302,249432,246348,244828,251225,245626,249553,249952,250245,248677,249068,247757,247112,247016,249805,244951,249852,248349,250947,247266,249726,249932,247436,246477,249194,251277,251115,247111,248184,248762,247119,250861,249492,249393,249822,246679,246759,247937,247619,248071,250487,247863,248435,250626,245392,250788,246513,248841,250867,246566,247454,245811,245817,251945,249979,249789,248968,244914,251821,251680,247003,248643,250263,245613,245677,247059,251221,247256,247176,250370,249953,247587,249975,250363,249347,252009,247108,251229,248471,248112,244885,249559,244833,246077,248350,251318,246654,246161,250044,250463,246878,246357,251919,247107,251908,249350,246565,247025,248613,250504,248456,244965,248199,248508,247641,246326,250355,250172,247418,249369,251195,249974,249142,245829,247117,250552,248546,245499,246333,246779,250979,247979,246102,250043,248767,252008,244760,250175,247466,246401,246229,245514,250633,250916,247503,247373,247221,249019,249696,250652,250410,251548,245491,248336,250540,246693,251739,251605,246366,245663,250022,245369,250273,247200,247952,248648,246594,250282,250650,246003,249534,248417,247143,247540,250536,248164,247942,245674,249874,250655,251839,246675,247508,249966,248541,251681,251998,250143,247069,250179,248398,247437,249692,247745,248713,246504,249709,245286,247316,245208,246160,251974,250004,248887,245218,246419,245340,245325,247597,250669,247765,251763,251375,245248,245774,245126,251217,248644,250259,250211,246772,246299,251640,250088,251320,246482,251626,245979,246481,247077,247723,245461,244831,247517,248880,249086,249847,246036,245710,248008,245839,248583,248837,247558,250696,251510,246549,246218,247018,245083,249009,248444,251335,245843,248464,247252,246040,245287,247882,246279,245199,245102,245601,246306,245730,244934,247818,248780,251049,250242,251145,248078,251228,250183,251056,251137,249303,249274,249638,248393,250805,245693,251384,248428,246180,244953,248406,251170,249508,249185,248734,249022,250646,245498,249950,251194,249066,249687,246138,249515,250135,245984,248771,249605,248509,250381,245933,251549,247756,249415,251922,249652,249951,248440,248650,250417,246383,251607,245764,246402,249278,246550,250371,251565,247637,246826,245655,247240,245784,247509,249463,247329,248820,245085,247383,248245,245530,250406,246065,249065,251421,247393,248197,247549,245190,245255,247809,250635,244700,248717,249683,248321,245819,251232,250700,245157,251470,248293,251212,248246,247344,250524,249114,246346,245209,248158,250613,244987,247657,246756,248993,248492,249681,248985,245181,245469,252015,248467,245661,248448,249791,245010,251568,249865,250023,715616,257112,257472,255344,257004,252093,253960,255771,258805,254182,256568,254239,255445,715647,254101,254031,252650,715355,255330,254910,256798,255620,252692,252225,715440,253528,253059,252091,253122,252070,258218,715416,256664,254877,253766,715541,253310,255233,257325,252074,256198,254444,715204,253125,258087,253128,255507,253429,254108,254086,255625,254074,254856,257147,256679,254665,252541,258326,254332,258735,254079,257165,256737,256819,254510,253735,258824,257478,252274,253017,252955,714745,257470,255161,258085,715362,255382,257441,253343,253342,256654,258045,256731,256868,257977,715412,252496,255332,258570,255276,253249,257790,715421,714926,253367,258510,255217,257336,253262,258825,715315,258269,255487,256479,252071,256744,258549,257981,254041,254603,257220,714864,258884,253015,714839,256264,254958,256226,258360,255257,256035,256697,252602,255068,258899,255684,255392,253664,715556,252190,258528,257805,715564,252522,255770,256357,258628,253286,257642,252568,257627,252909,255296,258352,254159,253897,255364,714842,255331,255870,257559,252609,255218,256841,252676,254313,253613,258676,715227,257329,253741,258589,258527,715190,254157,253255,254697,715524,257418,255594,258205,253121,252876,254256,254696,257139,254588,715076,256238,256976,256904,255775,253064,254492,255083,715659,256645,255449,257411,254530,256488,252267,254465,252175,252868,255033,714651,258817,257509,257546,715441,252705,715100,254360,256804,255808,253722,255911,256164,255210,252905,252142,252459,257153,255100,253573,252374,255673,256273,257654,715289,256225,258118,252425,258501,255777,255571,256360,252833,252777,255588,257360,252245,257722,252935,253363,255748,258467,254369,253428,254396,715308,715123,255069,256070,255317,257503,254756,252325,714640,257876,714660,257142,255408,254333,254354,256138,252231,255735,254565,256455,256494,254325,255996,258701,714702,258127,252330,254821,258610,256621,257214,258361,255158,257177,255918,254671,714633,254906,255157,715641,257110,257729,257249,257127,714654,258349,258292,255416,257330,714821,258551,254940,253932,256055,714947,258380,252988,714877,715137,252750,258483,258783,252647,254992,257157,256136,714874,252518,255525,715537,253600,256031,258640,257266,257443,256305,258897,252351,254061,257467,252089,254228,257655,252427,256812,715265,257230,715596,255595,256482,258665,257980,258499,255641,715026,255039,256011,258072,715237,252286,258820,256722,253923,255133,258591,257290,256786,714787,252202,252424,256931,252716,258734,256696,257068,255940,253131,253090,256622,253351,256530,715366,254753,254948,255245,257378,255015,255848,254855,254812,254637,255020,255465,715518,253734,714762,256380,256118,715128,257109,257384,256527,255607,714686,254673,252927,254328,256490,255201,255230,254303,257674,252308,256650,256851,254594,253612,254189,254767,714687,258542,256474,256116,252985,256394,715644,255686,258828,257801,252021,257342,255299,258144,258083,714761,714892,255895,255937,255864,252502,715041,258666,253175,258307,254391,252440,258491,252578,258013,256783,257704,715273,256970,252934,256439,257592,257831,258462,252170,257059,715052,252859,254124,253183,257584,252648,714823,253702,715446,256435,253057,254820,715147,715178,253007,256282,254901,253967,258538,253713,258157,253384,256496,254269,258323,253306,256933,257046,256944,257333,258699,253036,256237,253865,254262,715638,252643,253920,254123,257401,254938,258007,255144,254891,715259,714757,255087,257792,715332,252483,257672,258101,253290,254592,252567,253544,714664,254156,253641,253453,714841,258782,256322,258377,254260,256808,254120,715465,715401,252410,254415,254810,256695,257388,254622,257923,255721,258459,252610,258653,255269,255635,258297,254819,715642,715116,254923,255624,252064,256912,258890,257636,257872,254760,254368,255442,253394,254046,715496,253034,715651,257043,257807,715463,252589,257085,252929,254446,255321,252644,255125,258672,715354,256824,256047,253594,715084,258469,256956,254576,258396,253665,255197,256618,257493,253297,253847,255390,256347,715213,715478,253298,256558,256642,254130,257164,253554,254254,715309,254190,255284,253546,257770,254933,252684,256021,255426,715646,253144,715562,258609,253316,254972,252844,254455,253374,256592,256139,715414,256191,253772,253769,256204,715151,254677,256187,257113,252081,715325,252601,256349,252317,255147,252084,254787,257066,257454,256689,256423,255959,256060,258780,257450,255267,715002,254118,255353,715035,714916,252982,714663,715400,258800,253758,257862,257405,255459,254950,252173,255932,254849,715543,253349,255113,255683,253485,253000,715397,256754,252765,253823,258017,253712,715595,256796,253103,252371,256277,256196,257051,258113,256590,257306,252220,715081,256979,258142,715010,253021,253195,257241,255732,252087,715375,252799,254272,256538,715267,256877,257836,257196,258329,715358,254323,258112,254791,253068,254288,715382,257795,257292,255123,253642,254776,257016,258120,715280,254829,257518,258603,252029,252393,714977
   ],
   outputPath: 'outputs/exportTranscribedData.csv'
}

const data_array=[
  {
   max_results: 300,
   outputPath: 'outputs/L-จ่ายขั้นต่ำ.csv',
   sqlCondition: "s.reference REGEXP 'จ่าย *ขั้น *ต่ำ' AND s.channel = 'L'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/L-ปิดบัญชี.csv',
   sqlCondition: "s.reference REGEXP '[^เ]ปิด *บัญชี.*' AND s.channel = 'L'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/L-ขอทราบเบอร์มือถือ.csv',
   sqlCondition: "s.reference REGEXP 'ขอ *ทราบ *เบอร์ *มือ *ถือ' AND s.channel = 'L'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/L-ทำงานที่ไหน.csv',
   sqlCondition: "s.reference REGEXP 'ทำ *งาน *ที่ *ไหน' AND s.channel = 'L'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/R-จ่ายขั้นต่ำ.csv',
   sqlCondition: "s.reference REGEXP 'จ่าย *ขั้น *ต่ำ' AND s.channel = 'R'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/R-ปิดบัญชี.csv',
   sqlCondition: "s.reference REGEXP '[^เ]ปิด *บัญชี.*' AND s.channel = 'R'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/R-ขอทราบเบอร์มือถือ.csv',
   sqlCondition: "s.reference REGEXP 'ขอ *ทราบ *เบอร์ *มือ *ถือ' AND s.channel = 'R'"
  },
  {
   max_results: 300,
   outputPath: 'outputs/R-ทำงานที่ไหน.csv',
   sqlCondition: "s.reference REGEXP 'ทำ *งาน *ที่ *ไหน' AND s.channel = 'R'"
  },
]

const task={
  streams: {
    // imported:{},
    output:{}
  },
  openFiles: async function(data) {
    return new Promise((resolve,reject)=>{
      try{
        this.streams.output = fs.createWriteStream(data.outputPath);
        this.streams.output.write(`voice_log_id,start_time,end_time,reference,channel\n`);
        // this.streams.output.write(`transcription_text,start,stop,path\n`);
        setTimeout(()=>{resolve('success')}, 1000)
      } catch (e) {
        reject(e)
      }
      
    })
    
    
    // this.streams.importedFail = fs.createWriteStream('outputs/elasticsearch_imported_FAIL.txt');
  },
  closeFiles: function(data) {
    return new Promise((resolve,reject)=>{
      try{
        this.streams.output.end();
        console.log(`Finish writing to file: ${data.outputPath}`)
        setTimeout(()=>{resolve('success')}, 1000)
      } catch (e) {
        reject(e)
      }
      
    })
  },
  runEach: async function(voice_log50) {
    return new Promise((resolve,reject)=>{
      // this.openFiles(data)
      // this.streams.output.write(`transcription_text,start,stop,path\n`);
      

      let sql = `
        select s.* from segments s
JOIN voice_logs v
ON s.voice_log_id = v.id
where 
 audio_path like "${voice_log50.filename}"
#or file_url like "${voice_log50.filename}"
 order by s.start_time
      `
       // or file_url like "${voice_log50.filename}"

      // console.log(sql)
      // resolve(1);

      connection2.query(sql)
      .then(result0=>{
        console.log(`finish getting ${result0.length} records for id:${voice_log50.voice_log_id}`)
        
        result0.forEach(r=>{
          this.streams.output.write(`${voice_log50.voice_log_id},${r.start_time},${r.end_time},${r.reference},${r.channel}\n`);
        })

        // this.closeFiles(data);

        resolve(1);
        
      })      
      .catch(err=>{
        console.log(err)
        // connection.close()
        reject(err);
      })
      
    })


      
  },
  getSqlResults: async function(){
    return new Promise((resolve,reject)=>{

      let sql = `
        select id, voice_file_url from voice_logs 
        where id IN (${data.idIn50.sort().join(',')})
      `

      connection.query(sql)
      .then(result=>{
        // console.log(result)
        resolve(result)
        // connection.close()
      })      
      .catch(err=>{
        console.log(err)
        // connection.close()
      })   
    })
  },
  // getSqlResults2: async function(voice_logs50){
  //   return new Promise((resolve,reject)=>{

  //     let sql = `
  //       sselect id, voice_file_url from voice_logs 
  //       where id IN (${data.idIn50.join(',')})
  //     `

  //     await asyncForEach(voice_logs50, async data=>{
  //       await this.runEach(data)
  //     })

  //     connection.query(sql)
  //     .then(result=>{
  //       // console.log(result)
  //       resolve(result)
  //       // connection.close()
  //     })      
  //     .catch(err=>{
  //       console.log(err)
  //       // connection.close()
  //     })   
  //   })
  // },
  
  mapReduce: function(result0){
    return new Promise((resolve,reject)=>{
      let result = result0

      result = result.map(r=>{return {
        voice_log_id: r.id,
        filename: `%${path.basename(r.voice_file_url)}`
      }})

      resolve(result)

      // console.log(result)
      // clipboardy.writeSync(result);
      
      // resolve(result)
      // connection.close()
    })
    
  },
  // filterResults: function(result0){
  //   return new Promise((resolve,reject)=>{
  //     let result = result0.filter(r=>{
  //       let first23digit = r.dnis.slice(1,4)

  //       if (first23digit.slice(0,2)=='02'){
  //         first23digit = '02'
  //       }
  //       // console.log(first23digit)

  //       if (r.remark.indexOf(first23digit) == -1){
  //         return true;
  //       }

  //       return false
  //     })

  //     result = result.map(r=>r.id).join(',')

  //     resolve(result)

  //     // console.log(result)
  //     // clipboardy.writeSync(result);
      
  //     // resolve(result)
  //     // connection.close()
  //   })
    
  // },
  getQuery: function (rec){
    return `select v.id,v.ani,v.dnis,v.start_time,v.operator_id,r.id, r.customer_id,r.sub_operator_id,r.call_result,r.remark,r.created_at,r.id 
      from voice_logs v left join call_results r 
      on v.id = r.voice_log_id
      where v.id IN (${rec})
      order by v.extension`
  },
  run: async function (){
    // await asyncForEach(data_array, async data=>{
    //   await this.runEach(data)
    // })
    await this.openFiles(data)

    let voicelogs50 = await this.getSqlResults()
    .then(this.mapReduce)

    await asyncForEach(voicelogs50, async data=>{
      await this.runEach(data)
    })

    await this.closeFiles(data)


    // .then(this.getSqlResults2)
    // .then(clipboardy.writeSync)
    // .catch(console.log)
    // .then(()=>connection.close())

    // connection.close();
    

  },


}


// === Select One ===
// task.test();
// task.insertTags();
// task.insertTagsMapping();

// task.getSql_new_keywords_type();
//task.getSql_new_keywords();
// task.getCompareColumns();
task.run();

// === End Select ===
 
// connection.end();

// connection.close();


